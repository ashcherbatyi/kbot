name: KBOT-CICD

on: push

env:
  TARGETARCH: amd64

jobs:
    ci:
        name: CI
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Determine version
              id: build
              run: echo "version=$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

            - name: Run test
              run: make test

            - name: GitHub Container Registry Login
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ secrets.DOCHERHUB_USERNAME }}
                password: ${{ secrets.DOCHERHUB_TOKEN }}
                
            - name: Build&Push
              env:
                APP: "kbot"
                REGISTRY: ghcr.io/ashcherbatyi
              run: make image push

            - name: Run container and test
              env:
                TELE_TOKEN: ${{ secrets.TELE_TOKEN }}
                VERSION: ${{ env.version }}
              run: |
                docker run -d --name kbot_test \
                  -e TELE_TOKEN=${{ secrets.TELE_TOKEN }} \
                  ghcr.io/ashcherbatyi/kbot:${{ env.VERSION }}-linux-amd64
                sleep 2
                docker logs kbot_test > container_logs.txt
                if ! grep -q "kbot started ${{ env.version }}" container_logs.txt; then
                echo "Expected log message not found!"
                exit 1
                fi
                docker stop kbot_test
                docker rm kbot_test
    cd:
        name: CD
        needs: ci
        runs-on: ubuntu-latest

        steps:
            - name: Checkout KBOT Repo
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Authenticate to Google Cloud
              uses: google-github-actions/auth@v1
              with:
                credentials_json: ${{ secrets.GCP_SA_KEY }}
  
            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v1
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}

            - name: Install SOPS
              run: |
                sudo apt-get update
                sudo apt-get install -y sops jq

            - name: Check if TELE_TOKEN exists in GCP Secret Manager
              id: check_gcp_secret
              run: |
                if gcloud secrets describe TELE_TOKEN; then
                  echo "EXISTING_TOKEN=$(gcloud secrets versions access latest --secret='TELE_TOKEN')" >> $GITHUB_ENV
                  echo "::set-output name=exists::true"
                else
                  echo "::set-output name=exists::false"
                fi

            - name: Compare TELE_TOKEN from GitHub and GCP
              id: compare_tokens
              run: |
                if [ "${{ steps.check_gcp_secret.outputs.exists }}" = "false" ] || [ "${{ secrets.TELE_TOKEN }}" != "$EXISTING_TOKEN" ]; then
                  echo "::set-output name=token_changed::true"
                else
                  echo "::set-output name=token_changed::false"
                fi

            - name: Update TELE_TOKEN in GCP Secret Manager if changed
              if: steps.compare_tokens.outputs.token_changed == 'true'
              run: |
                echo ${{ secrets.TELE_TOKEN }} | gcloud secrets create TELE_TOKEN --data-file=- --replication-policy=automatic || gcloud secrets versions add TELE_TOKEN --data-file=-

            - name: Encrypt TELE_TOKEN with SOPS
              if: steps.compare_tokens.outputs.token_changed == 'true'
              run: |
                  echo "apiVersion: v1
                  kind: Secret
                  metadata:
                    name: tele-token
                    namespace: default
                  data:
                    token: $(echo -n ${{ secrets.TELE_TOKEN }} | base64)" | sops --encrypt --gcp-kms "projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/keyRings/sops-flux/cryptoKeys/sops-key-flux" > secret-enc.yaml

            - name: Checkout Flux GitOps Repo
              if: steps.compare_tokens.outputs.token_changed == 'true'
              uses: actions/checkout@v4
              with:
                repository: ashcherbatyi/flux-gitops
                path: flux-gitops
                token: ${{ secrets.GITHUB_TOKEN }}

            - name: Copy encrypted secret to Flux GitOps repo
              if: steps.compare_tokens.outputs.token_changed == 'true'
              run: |
                mkdir -p flux-gitops/clusters/demo
                mv secret-enc.yaml flux-gitops/clusters/demo/secret-enc.yaml

            - name: Push encrypted secret to Flux GitOps repo
              if: steps.compare_tokens.outputs.token_changed == 'true'
              run: |
                cd flux-gitops
                git config user.name github-actions
                git config user.email github-actions@github.com
                git add clusters/demo/secret-enc.yaml
                git commit -m "Add encrypted TELE_TOKEN secret"
                git push origin main

            - uses: mikefarah/yq@master
              with:
                cmd: yq -i '.image.tag=strenv(VERSION)' helm/values.yaml

            - run: |
                git config user.name github-actions
                git config user.email github-actions@github.com
                git commit -am "update version $VERSION"
                git push origin main